#import <Foundation/Foundation.h>
#import "SWGError.h"
#import "SWGIssueResponse.h"
#import "SWGIssue.h"
#import "SWGIssueLogsResponse.h"
#import "SWGEnumerationItemResponse.h"
#import "SWGIssueStatusesResponse.h"
#import "SWGObject.h"
#import "SWGApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface SWGIssuesApi: NSObject

@property(nonatomic, assign)SWGApiClient *apiClient;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(SWGIssuesApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;
+(SWGIssuesApi*) sharedAPI;
///
///
/// Set a Issue to a cancelled status
/// Closes a *Issue* with a cancelled status
///
/// @param issueId The primary key of the *Issue* to cancel.
/// 
///
/// @return 
-(NSNumber*) cancelIssueWithIssueId: (NSString*) issueId
    completionHandler: (void (^)(NSError* error)) handler;


///
///
/// Creates a new Issue
/// Creates a new *Issue*
///
/// @param issues Issue to create
/// 
///
/// @return SWGIssueResponse*
-(NSNumber*) createIssueWithIssues: (SWGIssue*) issues
    completionHandler: (void (^)(SWGIssueResponse* output, NSError* error)) handler;


///
///
/// Add a log to a Issue
/// Logs notes to an *Issue*
///
/// @param issueId The primary key of the related *Issue*
/// @param notes Notes to log against the *Issue*
/// 
///
/// @return SWGIssueLogsResponse*
-(NSNumber*) createIssueLogWithIssueId: (NSString*) issueId
    notes: (NSString*) notes
    completionHandler: (void (^)(SWGIssueLogsResponse* output, NSError* error)) handler;


///
///
/// Returns a Issue
/// Returns a *Issue* record
///
/// @param issueId The primary key of the *Issue*
/// 
///
/// @return SWGIssueResponse*
-(NSNumber*) getIssueWithIssueId: (NSString*) issueId
    completionHandler: (void (^)(SWGIssueResponse* output, NSError* error)) handler;


///
///
/// Returns a collection of IssueLogs
/// Returns a collection of *IssueLog* records
///
/// @param issueId The primary key of the *Issue*
/// 
///
/// @return SWGIssueLogsResponse*
-(NSNumber*) getIssueLogsWithIssueId: (NSString*) issueId
    completionHandler: (void (^)(SWGIssueLogsResponse* output, NSError* error)) handler;


///
///
/// Returns collection of categories
/// Returns the categories available for an *Issue*
///
/// 
///
/// @return SWGEnumerationItemResponse*
-(NSNumber*) getIssueMetaCategoriesWithCompletionHandler: 
    (void (^)(SWGEnumerationItemResponse* output, NSError* error)) handler;


///
///
/// Returns collection of resolutions
/// Returns the resolutions available for an *Issue*
///
/// 
///
/// @return SWGEnumerationItemResponse*
-(NSNumber*) getIssueMetaResolutionsWithCompletionHandler: 
    (void (^)(SWGEnumerationItemResponse* output, NSError* error)) handler;


///
///
/// Returns collection of statuses
/// Returns the statuses available for an *Issue*
///
/// 
///
/// @return SWGEnumerationItemResponse*
-(NSNumber*) getIssueMetaStatusesWithCompletionHandler: 
    (void (^)(SWGEnumerationItemResponse* output, NSError* error)) handler;


///
///
/// Returns collection of types
/// Returns the types available for an *Issue*
///
/// 
///
/// @return SWGEnumerationItemResponse*
-(NSNumber*) getIssueMetaTypesWithCompletionHandler: 
    (void (^)(SWGEnumerationItemResponse* output, NSError* error)) handler;


///
///
/// Returns a collection of IssueStatuses
/// Returns a collection of *IssueStatuse* records
///
/// @param issueId The primary key of the *Issue*
/// 
///
/// @return SWGIssueStatusesResponse*
-(NSNumber*) getIssueStatusHistoryWithIssueId: (NSString*) issueId
    completionHandler: (void (^)(SWGIssueStatusesResponse* output, NSError* error)) handler;


///
///
/// Returns a collection of Issues
/// Returns a collection of *Issue* records
///
/// @param limit Pagination result limit (defaults to 10)
/// @param start Pagination starting result number (defaults to 0)
/// @param membersId Optionally limit result to this {members_id}
/// @param membersUsersId Optionally limit result to this {members_users_id}
/// @param membersLocationsId Optionally limit result to this {members_locations_id}
/// 
///
/// @return SWGIssueResponse*
-(NSNumber*) getIssuesWithLimit: (NSNumber*) limit
    start: (NSNumber*) start
    membersId: (NSString*) membersId
    membersUsersId: (NSString*) membersUsersId
    membersLocationsId: (NSString*) membersLocationsId
    completionHandler: (void (^)(SWGIssueResponse* output, NSError* error)) handler;


///
///
/// Set a Issue to a resolved status
/// Closes a *Issue* with a resolved status
///
/// @param issueId The primary key of the *Issue* to resolve.
/// 
///
/// @return 
-(NSNumber*) resolveIssueWithIssueId: (NSString*) issueId
    completionHandler: (void (^)(NSError* error)) handler;



@end
